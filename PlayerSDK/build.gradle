

def v = "1.1.6"

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.2'
    }
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion 19
    buildToolsVersion '19.1.0'

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 19
        versionCode 3
        versionName v
    }

    buildTypes {
        debug {

        }

        release {
            minifyEnabled false
        }
    }

    lintOptions {
        abortOnError true
    }

}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:19.1.0'
    compile 'com.android.support:support-annotations:22.1.1'

    compile 'com.squareup.retrofit:retrofit:1.6.1'
    compile 'com.squareup.okhttp:okhttp:2.0.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
    compile 'com.squareup:otto:1.3.5'
    compile 'com.caverock:androidsvg:1.2.1'
    compile 'de.greenrobot:eventbus:2.2.1'

    /*
    androidTestCompile 'org.hamcrest:hamcrest-integration:1.1'
    androidTestCompile 'org.hamcrest:hamcrest-core:1.1'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.1'
    androidTestCompile('junit:junit:4.12') {
        exclude module: 'hamcrest-core'
    }

    //include the stable robolectric 2.4 library

    androidTestCompile('org.robolectric:robolectric:2.4') {
        exclude module: 'classworlds'
        exclude module: 'commons-logging'
        exclude module: 'httpclient'
        exclude module: 'maven-artifact'
        exclude module: 'maven-artifact-manager'
        exclude module: 'maven-error-diagnostics'
        exclude module: 'maven-model'
        exclude module: 'maven-plugin-registry'
        exclude module: 'maven-profile'
        exclude module: 'maven-project'
        exclude module: 'maven-settings'
        exclude module: 'nekohtml'
        exclude module: 'plexus-container-default'
        exclude module: 'plexus-interpolation'
        exclude module: 'plexus-utils'
        exclude module: 'wagon-file'
        exclude module: 'wagon-http-lightweight'
        exclude module: 'wagon-http-shared'
        exclude module: 'wagon-provider-api'
        //exclude group: 'com.android.support', module: 'support-v4'
    }

    androidTestCompile('com.squareup:fest-android:1.0.+') {
        //exclude group: 'com.android.support', module: 'support-v4'
    }
    */
}

// Deployment to maven package repository


apply plugin: 'maven'
apply plugin: 'signing'

def getRepositoryUsername() {
  return hasProperty('sonatypeUsername') ? sonatypeUsername : "";
}

def getRepositoryPassword() {
  return hasProperty('sonatypePassword') ? sonatypePassword : "";
}

signing {
    // This requires a gradle.properties file with signing.keyId, signing.password,
    // signing.secretKeyRingFile

    sign configurations.archives
}

uploadArchives {
    repositories.mavenDeployer {

        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
            authentication(userName: getRepositoryUsername(),
            password: getRepositoryPassword())
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
            authentication(userName: getRepositoryUsername(),
            password: getRepositoryPassword())
        }

        pom.version = v
        pom.groupId = "fm.feed.android"

        pom.project {
            name 'Feed.fm client library for Android'
            packaging 'aar'
            description 'This is an Android library for making use of the Feed.fm \'music as a service\' REST API. This library retrieves and handles playback of audio files and has a simple UI to serve as the foundation for your own music player.'
            url 'https://developer.feed.fm/documentation'


            scm {
                url 'scm:git@github.com:fuzz-radio/Android-SDK.git'
                connection 'scm:git@github.com:fuzz-radio/Android-SDK.git'
                developerConnection 'scm:git@github.com:fuzz-radio/Android-SDK.git'
            }

            licenses {
                license {
                    name 'The MIT License (MIT)'
                    url 'http://opensource.org/licenses/MIT'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'feedfm'
                    name 'Eric Lambrecht'
                    email 'eric@feed.fm'
                }
                developer {
                    id 'MartinH'
                    name 'Martin Harkins'
                    email 'mharkins@gmail.com'
                }
            }
        }
    }

}

// Documentation, which is really hard to generate with the latest Gradle

/*
android.libraryVariants.all { variant ->
    // Task that only generates the end-user relevant javadoc.
    task "generate${variant.name.capitalize()}Javadoc"(type: Javadoc) {

        title = "Documentation for Android $android.defaultConfig.versionName b$android.defaultConfig.versionCode"
        destinationDir = new File("${project.getProjectDir()}/doc/compiled/", variant.baseName)
        source = variant.javaCompile.source

        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)

        description "Generates Javadoc for $variant.name."

        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PRIVATE
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://developer.android.com/reference/reference/");
        exclude '**' + '/BuildConfig.java'
        exclude '**' + '/R.java'

    }
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../javadoc/")
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        print variant.name;

        // title = ''
        // description = ''
        source = variant.javaCompile.source
        classpath = files(configurations.compile, variant.javaCompile.classpath.files, project.android.getBootClasspath())
        options {
            links "http://docs.oracle.com/javase/7/docs/api/"
            linksOffline "http://d.android.com/reference","${android.sdkDirectory}/docs/reference"
        }
        exclude '**' + '/BuildConfig.java'
        exclude '**' + '/R.java'
    }
}

task androidJavadocsJar(type: Jar) {
    classifier = 'javadoc'
    //basename = artifact_id
    from project.docsDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    //basename = artifact_id
    from android.sourceSets.main.java
}

artifacts {
    //archives packageReleaseJar
    archives androidSourcesJar
    archives androidJavadocsJar
}

signing {
    required { has("release") && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}
*/

// Testing - which doesn't work with the latest Gradle

/*

robolectric {
    // configure the set of classes for JUnit tests
    include '**' + '/*Test.class'
    exclude '**' + '/espresso/**' + '/*.class'
}
*/