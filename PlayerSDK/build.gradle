buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.2'
        classpath 'org.robolectric:robolectric-gradle-plugin:0.12.0'

    }
}
allprojects {
    repositories {
        mavenCentral()
    }
}
apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'robolectric'

group = "fm.feed.android"
archivesBaseName = "player-sdk"
version = "1.1.2"

configurations {
    archives {
        extendsFrom configurations.default
    }
}
signing {
    required { has("release") && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}
android {
    compileSdkVersion 19
    buildToolsVersion '19.1.0'

    defaultConfig {
        applicationId "fm.feed.android.playersdk"
        minSdkVersion 10
        targetSdkVersion 19
        versionCode 2
        versionName version
        testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
    }
    buildTypes {
        debug {
        }

        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        androidTest {
            setRoot('src/androidTest')
        }
    }
    lintOptions {
        abortOnError false
    }
}

android.libraryVariants.all { variant ->
    // Task that only generates the end-user relevant javadoc.
    task "generate${variant.name.capitalize()}Javadoc" ( type: Javadoc) {
        description "Generates Player Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");

        exclude '**/BuildConfig.java'
        exclude '**/R.java'
        exclude '**/service/**'
        exclude '**/observer/**'
    }

    tasks.create(name: "generate${variant.name.capitalize()}JavadocFull", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");

        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

task androidJavadocsJar(type: Jar) {
    classifier = 'javadoc'
    //basename = artifact_id
    from project.docsDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    //basename = artifact_id
    from android.sourceSets.main.java
}

artifacts {
    //archives packageReleaseJar
    archives androidSourcesJar
    archives androidJavadocsJar
}

uploadArchives {
    configuration = configurations.archives

    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: sonatypeDeployRepo) {
            authentication(userName: sonatypeUsername,
                    password: sonatypePassword)
        }

        snapshotRepository(url: sonatypeSnapshotRepo) {
            authentication(userName: sonatypeUsername,
                    password: sonatypePassword)
        }

        pom.project {
            name 'Feed.fm client library for Android'
            packaging 'aar'
            description 'This is an Android library for making use of the Feed.fm \'music as a service\' REST API. This library retrieves and handles playback of audio files and has a simple UI to serve as the foundation for your own music player.'
            url 'http://developer.feed.fm/documentation'

            scm {
                url 'scm:git@github.com:fuzz-radio/Android-SDK.git'
                connection 'scm:git@github.com:fuzz-radio/Android-SDK.git'
                developerConnection 'scm:git@github.com:fuzz-radio/Android-SDK.git'
            }

            licenses {
                license {
                    name 'The MIT License (MIT)'
                    url 'http://opensource.org/licenses/MIT'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'feedfm'
                    name 'Eric Lambrecht'
                    email 'eric@feed.fm'
                }
                developer {
                    id 'MartinH'
                    name 'Martin Harkins'
                    email 'mharkins@gmail.com'
                }
            }
        }
    }
}

robolectric {
    // configure the set of classes for JUnit tests
    include '**/*Test.class'
    exclude '**/espresso/**/*.class'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:19.1.0'
    compile 'com.squareup.retrofit:retrofit:1.6.1'
    compile 'com.squareup.okhttp:okhttp:2.0.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
    compile 'com.squareup:otto:1.3.5'
    compile 'com.caverock:androidsvg:1.2.1'
    compile 'de.greenrobot:eventbus:2.2.1'
    androidTestCompile 'org.hamcrest:hamcrest-integration:1.1'
    androidTestCompile 'org.hamcrest:hamcrest-core:1.1'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.1'
    androidTestCompile('junit:junit:4.11') {
        exclude module: 'hamcrest-core'
    }
    //include the stable robolectric 2.3 library
    androidTestCompile('org.robolectric:robolectric:2.3') {
        exclude module: 'classworlds'
        exclude module: 'maven-artifact'
        exclude module: 'maven-artifact-manager'
        exclude module: 'maven-error-diagnostics'
        exclude module: 'maven-model'
        exclude module: 'maven-plugin-registry'
        exclude module: 'maven-profile'
        exclude module: 'maven-project'
        exclude module: 'maven-settings'
        exclude module: 'nekohtml'
        exclude module: 'plexus-container-default'
        exclude module: 'plexus-interpolation'
        exclude module: 'plexus-utils'
        exclude module: 'wagon-file'
        exclude module: 'wagon-http-lightweight'
        exclude module: 'wagon-http-shared'
        exclude module: 'wagon-provider-api'
        exclude group: 'com.android.support', module: 'support-v4'
    }
    androidTestCompile('com.squareup:fest-android:1.0.+') {
        exclude group: 'com.android.support', module: 'support-v4'
    }
}
apply plugin: 'idea'
idea {
    module {
        testOutputDir = file('build/test-classes/debug')
    }
}
